#!/usr/bin/python3
# coding:utf-8

'''
跨站请求伪造

分为全局和局部

全局：中间件 django.middleware.csrf.CsrfViewMiddleware
局部：
1。@csrf_protect,为当前函数强制设置防跨站请求伪造功能，即便settings中没有设置全局中间件。
2。@csrf_exempt, 取消当前函数防跨站请求伪造功能，即便settings中设置了全局中间件。

注：from django.views.decorators.csrf import csrf_exempt,csrf_protect
'''

####################################
'''
cookie
由于cookie保存在客户端的电脑上，所以，JavaScript和jquery也可以操作cookie。

Django中默认支持Session，其内部提供了5种类型的Session供开发者使用：

数据库（默认）
缓存
文件
缓存+数据库
加密cookie

'''

############### 缓存 ##################

'''
由于Django是动态网站，所有每次请求均会去数据进行相应的操作，当程序访问量大时，耗时必然会更加明显，最简单解决方式是使用：缓存，缓存将一个某个views的返回值保存至内存或者memcache中，5分钟内再有人来访问时，则不再去执行view中的操作，而是直接从内存或者Redis中之前缓存的内容拿到，并返回。

Django中提供了6种缓存方式：

开发调试
内存
文件
数据库
Memcache缓存（python-memcached模块）
Memcache缓存（pylibmc模块）
'''
############ 分页 ###########

'''
一、Django内置分页

1
Paginator
二、自定义分页

分页功能在每个网站都是必要的，对于分页来说，其实就是根据用户的输入计算出应该在数据库表中的起始位置。

1、设定每页显示数据条数

2、用户输入页码（第一页、第二页...）

3、根据设定的每页显示条数和当前页码，计算出需要取数据表的起始位置

4、在数据表中根据起始位置取值，页面上输出数据
'''

############ 序列化与信号 #############
'''
关于Django中的序列化主要应用在将数据库中检索的数据返回给客户端用户，
特别的Ajax请求一般返回的为Json格式。

Django中提供了“信号调度”，用于在框架执行操作时解耦。
通俗来讲，就是一些动作发生的时候，信号允许特定的发送者去提醒一些接受者。
'''